package com.bj.ilji_server.ilog.entity;

import com.bj.ilji_server.likes.entity.Likes;
import com.bj.ilji_server.user_profile.entity.UserProfile;
import jakarta.persistence.*;
import lombok.*;
import org.hibernate.annotations.ColumnDefault;
import org.hibernate.annotations.CreationTimestamp;
import org.hibernate.annotations.DynamicInsert;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

@Getter
@NoArgsConstructor(access = AccessLevel.PROTECTED)
@Entity
@Table(name = "i_log",
    uniqueConstraints = {
        @UniqueConstraint( // 한 유저가 같은 날짜에 중복 작성 방지
                name = "uq_ilog_user_profile_date",
                columnNames = {"user_profile_id", "log_date"}
        )
    }
)
@DynamicInsert // @ColumnDefault가 제대로 동작하도록 추가
public class ILog {

    // 공개 범위를 나타내는 Enum
    public enum Visibility {
        PUBLIC, // 0 - 전체 공개
        FRIENDS_ONLY, // 1 - 친구 공개
        PRIVATE // 2 - 비공개
    }
    @Id
    // DDL의 'GENERATED BY DEFAULT AS IDENTITY'에 맞춰 IDENTITY 전략으로 변경
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @ManyToOne(fetch = FetchType.LAZY, optional = false)
    @JoinColumn(name = "user_profile_id", nullable = false)
    private UserProfile userProfile;


    @Column(name = "log_date", nullable = false)
    private LocalDate logDate;

    // DDL이 VARCHAR2(3000)이므로 @Lob 제거, length 명시
    @Column(name = "content", nullable = false, length = 3000)
    private String content;

    // ✅ [개선] DDL의 VARCHAR2(4000)과 길이를 일치시켜 일관성을 유지합니다.
    @Column(name = "img_url", length = 4000)
    private String imgUrl;

    @CreationTimestamp
    @Column(name = "created_at", nullable = false, updatable = false)
    private LocalDateTime createdAt;

    @ColumnDefault("0")
    @Column(name = "like_count", nullable = false)
    private int likeCount = 0;

    @ColumnDefault("0")
    @Column(name = "comment_count", nullable = false)
    private int commentCount = 0;

    // visibility 필드 추가 (Enum 타입으로 관리)
    @Enumerated(EnumType.ORDINAL) // Enum의 순서(0, 1, 2...)를 DB에 저장
    @ColumnDefault("0")
    @Column(name = "visibility", nullable = false)
    private Visibility visibility = Visibility.PUBLIC;

    // friend_tags 필드 추가
    @Column(name = "friend_tags", length = 2000)
    private String friendTags;

    // tags 필드 추가
    @Column(name = "tags", length = 1000)
    private String tags;

    // ✅ [신규] 공유 기능을 위한 고유 ID 컬럼 추가
    // unique = true로 설정하여 DB 수준에서 중복을 방지합니다.
    @Column(name = "share_id", unique = true, length = 9)
    private String shareId;

    @OneToMany(mappedBy = "iLog", cascade = CascadeType.ALL, orphanRemoval = true)
    private List<Likes> likes = new ArrayList<>();

    @Builder
    public ILog(UserProfile userProfile, LocalDate logDate, String content, String imgUrl, Visibility visibility, String friendTags, String tags) {
        this.userProfile = userProfile;
        this.logDate = logDate;
        this.content = content;
        this.imgUrl = imgUrl;
        if (visibility != null) { // Builder로 값이 주입된 경우에만 덮어쓰기
            this.visibility = visibility;
        }
        this.friendTags = friendTags;
        this.tags = tags;
    }
    
    // ✅ [신규] shareId를 설정하기 위한 Setter 역할의 메서드
    public void setShareId(String shareId) {
        this.shareId = shareId;
    }

    // 편의 메서드
    // ✅ [추가] 좋아요 카운트를 1 증가시킵니다.
    public void incrementLikeCount() {
        this.likeCount++;
    }

    // ✅ [추가] 좋아요 카운트를 1 감소시킵니다. 0보다 작아지지 않도록 보장합니다.
    public void decrementLikeCount() {
        this.likeCount = Math.max(0, this.likeCount - 1);
    }

    // ✅ [개선] 메서드 이름을 필드명 및 다른 메서드와 일관성 있게 변경합니다.
    public void increaseCommentCount() {
        this.commentCount++;
    }

    // ✅ [개선] 메서드 이름을 필드명 및 다른 메서드와 일관성 있게 변경합니다.
    public void decreaseCommentCount() {
        this.commentCount = Math.max(0, this.commentCount - 1);
    }

    /**
     * 일기 수정 시, 필드를 업데이트하는 편의 메서드
     * @param content 수정될 내용
     * @param imgUrl 수정될 이미지 URL 목록 (JSON 문자열)
     * @param visibility 수정될 공개 범위 (int)
     */
    public void update(String content, String imgUrl, int visibility) {
        this.content = content;
        this.imgUrl = imgUrl;
        // int 값을 Enum으로 안전하게 변환
        if (visibility >= 0 && visibility < Visibility.values().length) {
            this.visibility = Visibility.values()[visibility];
        }
        // 그 외의 값이 들어오면 기존 값을 유지하거나 기본값으로 설정할 수 있으나, 여기서는 유효한 값만 처리
    }
}
